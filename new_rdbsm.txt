DROP DATABASE students;
CREATE DATABASE students;
USE students;

CREATE TABLE `student` (
  `id` int(11) unsigned NOT NULL,
  `first_name` varchar(20) NOT NULL,
  `last_name` varchar(20) NOT NULL,
  `birth_date` date NOT NULL,
  `sex` bit(1) NOT NULL,
  `hostel_live` bit(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `training_course` (
  `id` INTEGER(11) UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
  `name` VARCHAR(50) NOT NULL,
PRIMARY KEY (`id`)
) ENGINE=InnoDB;

CREATE TABLE `techer` (
  `id` INTEGER(11) UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
  `first_name` VARCHAR(20) NOT NULL,
  `last_name` VARCHAR(20) NOT NULL UNIQUE,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;

ALTER TABLE `students`.`student` CHANGE COLUMN `id` `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT  ;
ALTER TABLE `students`.`training_course` ADD COLUMN `teacher_id` INT(11) UNSIGNED NOT NULL  AFTER `name` , 
  ADD CONSTRAINT `teacher_fk`
  FOREIGN KEY (`teacher_id` )
  REFERENCES `students`.`techer` (`id` )
  ON DELETE CASCADE
  ON UPDATE RESTRICT
, ADD INDEX `teacher_fk_idx` (`teacher_id` ASC) ;
CREATE  TABLE `students`.`exam` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT ,
  `date` TIMESTAMP NOT NULL ,
  PRIMARY KEY (`id`) ,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) );

ALTER TABLE `students`.`exam` ADD COLUMN `teacher_id` INT(11) UNSIGNED NOT NULL, 
  ADD CONSTRAINT `exam_teacher_fk`
  FOREIGN KEY (`teacher_id` )
  REFERENCES `students`.`techer` (`id` )
  ON DELETE RESTRICT
  ON UPDATE RESTRICT
, ADD INDEX `exam_teacher_fk_idx` (`teacher_id` ASC) ;

ALTER TABLE `students`.`exam` ADD COLUMN `training_course_id` INT(11) UNSIGNED NOT NULL, 
  ADD CONSTRAINT `exam_training_course_fk`
  FOREIGN KEY (`training_course_id` )
  REFERENCES `students`.`training_course` (`id` )
  ON DELETE RESTRICT
  ON UPDATE RESTRICT
, ADD INDEX `exam_training_course_fk_idx` (`training_course_id` ASC) ;

CREATE  TABLE `students`.`exam_result` (
  `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT ,
  `teacher_id` INT(11) UNSIGNED NOT NULL ,
  `student_id` INT(11) UNSIGNED NOT NULL ,
  `result` TINYINT NOT NULL ,
  `note` VARCHAR(50) NULL ,
  PRIMARY KEY (`id`) ,
  INDEX `exam_result_teacher_fk_idx` (`teacher_id` ASC) ,
  INDEX `exam_result_student_fk_idx` (`student_id` ASC) ,
  CONSTRAINT `exam_result_teacher_fk`
    FOREIGN KEY (`teacher_id` )
    REFERENCES `students`.`techer` (`id` )
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `exam_result_student_fk`
    FOREIGN KEY (`student_id` )
    REFERENCES `students`.`student` (`id` )
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
CREATE  TABLE `students`.`student_result` (
  `student_id` INT(11) UNSIGNED NOT NULL ,
  `training_course_id` INT(11) UNSIGNED NOT NULL ,
  `exam_id` INT(11) UNSIGNED,
  `result` TINYINT NOT NULL ,
  `date` DATE NOT NULL ,
  `note` VARCHAR(50) NULL ,
UNIQUE INDEX `student_result_unique` (`student_id` ASC) ,
  PRIMARY KEY (`student_id`, `training_course_id`) ,
  INDEX `student_result__idx` (`training_course_id` ASC) ,
  INDEX `student_result_student_id_idx` (`student_id` ASC) ,
  CONSTRAINT `student_result_training_course`
    FOREIGN KEY (`training_course_id` )
    REFERENCES `students`.`training_course` (`id` )
    ON DELETE RESTRICT
    ON UPDATE RESTRICT,
  CONSTRAINT `student_result_student_id`
    FOREIGN KEY (`student_id` )
    REFERENCES `students`.`student` (`id` )
    ON DELETE RESTRICT
    ON UPDATE RESTRICT);

ALTER TABLE `students`.`exam_result` ADD COLUMN `exam_id` INT(11) UNSIGNED NOT NULL  AFTER `note` , 
  ADD CONSTRAINT `exam_result_exam_fk`
  FOREIGN KEY (`exam_id` )
  REFERENCES `students`.`exam` (`id` )
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
, ADD INDEX `exam_result_exam_fk_idx` (`exam_id` ASC) ;

ALTER TABLE `students`.`student_result` 
  ADD CONSTRAINT `student_result_exam_fk`
  FOREIGN KEY (`exam_id` )
  REFERENCES `students`.`exam` (`id` )
  ON DELETE NO ACTION
  ON UPDATE NO ACTION
, ADD INDEX `student_result_exam_fk_idx` (`exam_id` ASC) ;

INSERT student(id, first_name, last_name, birth_date, sex) 
VALUES (1, 'Ivan', 'Petrov', '1999-06-28', 1);
INSERT student(id, first_name, last_name, birth_date, sex) 
VALUES (2, 'Maria', 'Ivanova', '2000-06-28', 0);
INSERT student(id, first_name, last_name, birth_date, sex) 
VALUES (3, 'Petr', 'Melnikov', '2000-07-25', 0);

INSERT techer(id, first_name, last_name) 
VALUES (1, 'Elena', 'Zaysteva');
INSERT techer(id, first_name, last_name) 
VALUES (2, 'Ekaterina', 'Filimonova');

INSERT training_course(id, name, teacher_id) 
VALUES (1, 'Системы управления базами данных', 1);
INSERT training_course(id, name, teacher_id) 
VALUES (2, 'Программирование', 2);
INSERT training_course(id, name, teacher_id) 
VALUES (3, 'Теория графов', 2);
INSERT training_course(id, name, teacher_id) 
VALUES (4, 'ТВИМС', 2);

INSERT exam(id, date, teacher_id, training_course_id) 
VALUES (1, '2020-01-02', 1, 1);
INSERT exam(id, date, teacher_id, training_course_id) 
VALUES (2, '2020-01-08', 2, 2);
INSERT exam(id, date, teacher_id, training_course_id) 
VALUES (3, '2020-01-08', 2, 3);
INSERT exam(id, date, teacher_id, training_course_id) 
VALUES (4, '2018-01-08', 2, 4);
INSERT exam(id, date, teacher_id, training_course_id) 
VALUES (5, '2017-01-08', 2, 4);

INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (1, 1, 1, 5, 'good', 1);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (2, 2, 1, 5, 'good', 2);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (3, 1, 2, 7, 'good', 1);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (4, 2, 1, 9, 'good', 3);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (5, 2, 1, 5, 'good', 4);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (6, 2, 3, 8, 'good', 5);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (7, 2, 2, 4, 'good', 4);
INSERT exam_result(id, teacher_id, student_id, result, note, exam_id) 
VALUES (8, 2, 2, 8, 'good', 4);


INSERT student_result(student_id, training_course_id, exam_id, date, note, result) 
VALUES (3, 1, 1, '2020-02-02', 'good', 8);
INSERT student_result(student_id, training_course_id, exam_id, date, note, result) 
VALUES (2, 4, 3, '2020-02-02', 'good', 10); 


SELECT first_name, last_name FROM student
INNER JOIN exam_result ON student.id = exam_result.student_id
INNER JOIN exam ON  exam_result.exam_id = exam.id
INNER JOIN training_course ON exam.training_course_id = training_course.id
WHERE exam_result.result >= 4 
AND training_course.name = 'Системы управления базами данных' 
ORDER BY exam_result.result DESC;

SELECT COUNT(*) FROM student
INNER JOIN exam_result ON student.id = exam_result.student_id 
INNER JOIN exam ON exam_result.exam_id = exam.id
INNER JOIN training_course ON exam.training_course_id = training_course.id
WHERE exam_result.result in (4, 5) 
AND training_course.name = 'Системы управления базами данных';

SELECT COUNT(*) FROM student_result
LEFT JOIN exam_result ON exam_result.student_id = student_result.student_id
AND student_result.exam_id = exam_result.exam_id
WHERE exam_result.student_id IS NULL
and student_result.result >= 4;

SELECT AVG(exam_result.result) 
FROM exam_result
INNER JOIN exam ON exam_result.exam_id = exam.id 
INNER JOIN training_course ON exam.training_course_id = training_course.id
WHERE training_course.name = 'Системы управления базами данных';

SELECT st.first_name, st.last_name FROM student
INNER JOIN exam_result ON student.id = exam_result.student_id 
INNER JOIN exam ON exam_result.exam_id = exam.id
INNER JOIN training_course ON exam.training_course_id = training_course.id
LEFT JOIN student as st ON st.id != student.id
WHERE training_course.name = 'Теория графов' 
AND exam_result.result >= 4;

SELECT teacher_id FROM training_course GROUP BY teacher_id HAVING COUNT(teacher_id) > 2;

SELECT distinct student.id, student.last_name FROM student
INNER JOIN exam_result first ON student.id = first.student_id
INNER JOIN exam_result second ON first.student_id = second.student_id
AND first.exam_id = second.exam_id 
AND first.id != second.id;

SELECT student.first_name, student.last_name, result FROM student
INNER JOIN student_result ON student.id = student_result.student_id
UNION
SELECT student.first_name, student.last_name, result FROM student
INNER JOIN exam_result ON student.id = exam_result.student_id
ORDER BY result DESC 
LIMIT 5;

SELECT techer.last_name FROM exam_result
INNER JOIN techer ON exam_result.teacher_id = techer.id
GROUP BY teacher_id
ORDER BY AVG(result) DESC
LIMIT 1;

SELECT exam_result.student_id, exam_result.result, YEAR(exam.date) as year
FROM exam_result
INNER JOIN exam ON exam_result.exam_id = exam.id 
INNER JOIN training_course ON exam.training_course_id = training_course.id 
WHERE training_course.name = "ТВИМС" 
ORDER BY year;